# Workflow name displayed on the GitHub Actions tab
name: 'Terraform CI/CD for GCP'

# Controls when the workflow will run
on:
  # Triggers the workflow on push events to the "main" branch
  push:
    branches:
      - 'main'
    # Only runs if files inside the 'terraform/' directory have changed
    paths:
      - 'terraform/**'

  # Triggers the workflow on pull request events targeting the "main" branch
  pull_request:
    branches:
      - 'main'
    paths:
      - 'terraform/**'

# Permissions required by the job for secure authentication
permissions:
  contents: 'read'
  id-token: 'write'

# Defines the jobs that will run as part of the workflow
jobs:
  terraform:
    name: 'Terraform IaC'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Sets default settings for all steps in this job
    defaults:
      run:
        shell: bash
        # All commands will run from this directory
        working-directory: ./terraform/environments/dev

    # A sequence of tasks that will be executed
    steps:
      # 1. Checks out your repository's code so the job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Authenticates to Google Cloud using Workload Identity Federation
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          # Uses secrets configured in the repository settings
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

      # 3. Installs and sets up the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 4. Runs 'terraform init' to initialize the backend and download providers
      - name: Terraform Init
        id: init
        run: terraform init

      # 5. Runs 'terraform fmt -check' to ensure code is properly formatted
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check

      # 6. Runs 'terraform plan' to create an execution plan
      #    This step only runs on pull requests to allow for review before applying.
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var-file="terraform.tfvars"

      # 7. Runs 'terraform apply' to provision or update the infrastructure
      #    This step only runs on pushes to the main branch to ensure controlled deployments.
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file="terraform.tfvars"

